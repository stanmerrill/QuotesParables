@using QuotesParables.Models;
@using QuotesParables.ViewModels;

@model QuoteListViewModel


@{
    var catList = Model.CategoryDropDown;
    var typeList = Model.TypeDropDown;

    ViewBag.Title = "Index";
    ViewBag.OpenToPublic = true;
    //var mapPath = System.Web.Hosting.HostingEnvironment.MapPath("~/");
    using (Html.BeginForm("Index"))
    {
        @Html.AntiForgeryToken()
        <div class="SearchContainerHeader">
        </div>
        //---------------------------------------------------------
        //------------Search by text
        //---------------------------------------------------------
        <div class="SearchContainerHeader">
            <div class="searchHeaderDiv">Search:&nbsp;</div>
            <div class="searchInputDiv">
                <input type="Text" name="SearchText" id="SearchText" class="textInput" value="@Model.searchText">
            </div>
        </div>
        //---------------------------------------------------------
        //------------Search by Category
        //---------------------------------------------------------
        <div class="SearchContainerHeader">
            <div class="searchHeaderDiv">Cateogry:</div>
            <select class="textInput" id="searchCategoryId" name="searchCategoryId">
                <option selected="selected" value="0">All</option>
                @foreach (var item in catList)
                {
                    if (Model.searchCategoryId == item.CategoryId)
                    {
                        <option value="@item.CategoryId" selected="selected">@item.Description</option>
                    }
                    else
                    {
                        <option value="@item.CategoryId">@item.Description</option>
                    }
                }
            </select>
        </div>
        //---------------------------------------------------------
        //------------Search by Type
        //---------------------------------------------------------
        <div class="SearchContainerHeader">
            <div class="searchHeaderDiv">Type:</div>
            <select class="textInput" id="searchQuoteTypeId" name="searchQuoteTypeId">
                <option selected="selected" value="0">All</option>
                @foreach (var item in typeList)
                {
                    if (Model.searchQuoteTypeId == item.QuoteTypeId)
                    {
                        <option value="@item.QuoteTypeId" selected="selected">@item.QuoteTypeDescription</option>
                    }
                    else
                    {
                        <option value="@item.QuoteTypeId">@item.QuoteTypeDescription</option>
                    }
                }
            </select>
        </div>
        string startRecord = (Model.pagingParameters.newStart + 1).ToString();
        int lastRecordInt;
        if (Model.pagingParameters.newStart + Model.pagingParameters.totalItemCount > Model.pagingParameters.itemsPerPage)
        {
            lastRecordInt = Model.pagingParameters.newStart + Model.pagingParameters.newCount;
        }
        else
        {
            lastRecordInt = Model.pagingParameters.newStart + Model.pagingParameters.totalItemCount;
        }
        string lastRecord = lastRecordInt.ToString();
        string totalRecords = Model.pagingParameters.totalItemCount.ToString();
        <div class="SearchContainerHeader">
            <div class="submitButtonDiv">
                <input type="submit" value="Search" id="SUBMITSEARCH" name="SUBMITSEARCH" class="submitButton" />&nbsp; &nbsp;
                <input type="button" value="Reset" id="resetSearchButton" class="submitButton" />
                &nbsp;&nbsp;@startRecord - @lastRecord of @totalRecords
            </div>
        </div>
        string nextDisabled = "Disabled=\"disabled\" ";
        string previoustDisabled = "Disabled=\"disabled\" ";
        string topDisabled = "Disabled=\"disabled\"";
        string bottomDisabled = "Disabled=\"disabled\"";

        if (Model.pagingParameters.nextIsActives)
        {
            nextDisabled = "";
        }
        if (Model.pagingParameters.topIsActives)
        {
            topDisabled = "";
        }
        if (Model.pagingParameters.previousIsActives)
        {
            previoustDisabled = "";
        }
        if (Model.pagingParameters.bottomIsActives)
        {
            bottomDisabled = "";
        }
        if (Model.pagingParameters.itemsPerPage <= Model.pagingParameters.totalItemCount)
        {
            <div class="SearchContainerHeader">
                <div class="submitButtonDiv">
                    <input type="submit" value="TOP" name="TOP" id="TOP" class="submitButton" @topDisabled />&nbsp;&nbsp;
                    <input type="submit" value="NEXT" name="NEXT" id="NEXT" class="submitButton" @nextDisabled />&nbsp;&nbsp;
                    <input type="submit" value="PREV" name="PREVIOUS" id="PREVIOUS" @previoustDisabled class="submitButton" />&nbsp;&nbsp;
                    <input type="submit" value="BOT" name="BOTTOM" id="BOTTOM" @bottomDisabled class="submitButton" /><br />&nbsp;&nbsp;
                </div>
            </div>
        }
        https://localhost:44310///---------------------------------------------------------
              //------------Set Security Level
              //---------------------------------------------------------
        int securityLevelInt = 1;
        if (HttpContext.Current.Session["CurrentUser"] != null)
        {
            var user = (LogonAccount)HttpContext.Current.Session["CurrentUser"];
            ViewBag.User = user;
            ViewBag.SecurityLevel = user.SecurityLevel;
            securityLevelInt = int.Parse(ViewBag.SecurityLevel);
        }
        foreach (var item in Model.quotesList)
        {
            string headerOutput = "<div class=\"containerHeader\">";
            if (securityLevelInt > 1)
            {
                //---------------------------------------------------------
                //------------Edit
                //---------------------------------------------------------
                headerOutput += "<div class= \"fieldValueDiv\"> ";
                headerOutput += "<a  class=\"editAnchor\" href=\"/Quotes/Edit/";
                headerOutput += item.QuoteId;
                headerOutput += "\" >Edit</a>";
                headerOutput += "</div>";
                //---------------------------------------------------------
                //------------Delete
                //---------------------------------------------------------
                headerOutput += "<div class=\"fieldValueDiv\">";
                headerOutput += "<a  class=\"editAnchor\" href=\"/Quotes/Delete/";
                headerOutput += item.QuoteId;
                headerOutput += "\" >Delete</a>";
                headerOutput += "</div>";
                //---------------------------------------------------------
                //------------Create
                //---------------------------------------------------------
                //@Html.ActionLink("Create New", "Create")
                headerOutput += "<div class=\"fieldValueDiv\">";
                headerOutput += "<a  class=\"editAnchor\" href=\"/Quotes/Create/";
                headerOutput += "\" >Create</a>";
                headerOutput += "</div>";
            }
            //---------------------------------------------------------
            //------------LIkes
            //---------------------------------------------------------
            //@Html.ActionLink("Create New", "Create")
            headerOutput += "<div class=\"fieldValueDiv\">";
            headerOutput += "<a  class=\"editAnchor\" href=\"/Quotes/Like/";
            headerOutput += item.QuoteId;
            headerOutput += "\" >Like This</a>";
            headerOutput += "</div>";
            //---------------------------------------------------------
            //------------Author
            //---------------------------------------------------------
            headerOutput += "<div class=\"fieldValueDiv\">";
            if (item.AuthorName == null || item.AuthorName.Trim().Length == 0)
            {
                headerOutput += "Author Unknown";
            }
            else
            {
                headerOutput += item.AuthorName;
            }
            headerOutput += "</div>";
            //---------------------------------------------------------
            //------------Type
            //---------------------------------------------------------
            headerOutput += "<div class=\"fieldValueDiv\">";
            headerOutput += item.QuoteType.QuoteTypeDescription;
            headerOutput += "</div>";
            //---------------------------------------------------------
            //------------Lkes
            //---------------------------------------------------------
            headerOutput += "<div class=\"fieldValueDiv\">";
            headerOutput += "No of Likes: " + item.Likes;
            headerOutput += "</div>";
            string categoryDisplay = Model.getCategoryText(item.CategoryId, item.CategoryId2, item.CategoryId3);
            if (categoryDisplay.Trim() != "")
            {
                headerOutput += "</div>";
                headerOutput += "<div class=\"containerHeader\">";
                //---------------------------------------------------------
                //------------Category
                //---------------------------------------------------------
                headerOutput += "<div class=\"fieldValueDiv\">";
                headerOutput += categoryDisplay;
                headerOutput += "</div>";
            }
            headerOutput += "</div>";
            @Html.Raw(headerOutput);
            //---------------------------------------------------------
            //------------Bottom blue line
            //---------------------------------------------------------
            string outputLine = "";
            @Html.Raw("<div class=\"containerBody\">");
            string currentLine = item.QuoteText.Replace(Environment.NewLine, "~").TrimEnd();
            string[] lines = currentLine.Split('~');
            foreach (string line in lines)
            {
                if (line.Trim() != "")
                {
                    outputLine = "<p class=\"textBodyDiv\">" + line + "</p>";
                    @Html.Raw(outputLine);
                }
            }
            @Html.Raw("</div>");
        }
        @Html.Raw("<div class=\"endDiv\"></div>");
        if (Model.pagingParameters.itemsPerPage <= Model.pagingParameters.totalItemCount)
        {
            <div class="SearchContainerHeader">
                <div class="submitButtonDiv">
                    <input type="submit" value="TOP" name="TOP" id="TOP" class="submitButton" @topDisabled />&nbsp;&nbsp;
                    <input type="submit" value="NEXT" name="NEXT" id="NEXT" class="submitButton" @nextDisabled />&nbsp;&nbsp;
                    <input type="submit" value="PREV" name="PREVIOUS" id="PREVIOUS" @previoustDisabled class="submitButton" />&nbsp;&nbsp;
                    <input type="submit" value="BOT" name="BOTTOM" id="BOTTOM" @bottomDisabled class="submitButton" /><br />&nbsp;&nbsp;
                </div>
            </div>
        }
    }

}
<script type="text/javascript">
    $("#resetSearchButton").click(function (event) {
        $("#SearchText").val("");
        $("#searchQuoteTypeId").val("0");
        $("#searchCategoryId").val("0");
        $("#SearchText").focus();
        return true;
    });
    $("#SearchText").focus();

    //document.getElementById("SearchText").focus();
    //document.getElementById('resetSearchButton').onclick = function () {
    //    document.getElementById("SearchText").value = "";
    //    document.getElementById("searchCategoryId").value = "0";
    //    document.getElementById("searchQuoteTypeId").value = "0";
    //};


</script>

